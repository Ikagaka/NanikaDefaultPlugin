// Generated by CoffeeScript 1.8.0

/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */

(function() {
  var NanikaPlugin;

  NanikaPlugin = this.NanikaPlugin;

  if (NanikaPlugin == null) {
    NanikaPlugin = {};
  }

  NanikaPlugin.notify_info = {
    initialize: function(nanika) {
      var balloonpathlist, basewareversion, ghostpathlist, installedballoonname, installedghostname, installedshellname, notifyballooninfo, notifydressupinfo, notifyfontinfo, notifyosinfo, notifyselfinfo, notifyshellinfo, notifyuserinfo, otherghostname, ownerghostname, rateofusegraph, uniqueid;
      ownerghostname = function() {
        return nanika.request('ownerghostname', {
          name: nanika.ghost.descript.name
        });
      };
      otherghostname = function() {
        var names;
        names = Object.keys(nanika.nanikamanager.nanikas).map(function(dirpath) {
          return nanika.nanikamanager.nanikas[dirpath].ghost.descript.name;
        }).filter(function(name) {
          return name !== nanika.ghost.descript.name;
        });
        return nanika.request('otherghostname', {
          names: names
        });
      };
      basewareversion = function() {
        var id, version;
        version = '0.0.0';
        id = 'Ikagaka';
        return nanika.request('basewareversion', {
          version: version,
          id: id
        });
      };
      notifyosinfo = function() {};
      notifyfontinfo = function() {};
      notifyselfinfo = function() {
        return nanika.request('notifyselfinfo', {
          name: nanika.ghost.descript.name,
          sakura_name: nanika.ghost.descript['sakura.name'],
          kero_name: nanika.ghost.descript['kero.name'],
          shell_name: nanika.named.shell.descript['name'],
          shell_path: null,
          balloon_name: nanika.named.balloon.descript['name'],
          balloon_path: null
        });
      };
      notifyballooninfo = function() {
        return nanika.request('notifyballooninfo', {
          balloon_name: nanika.named.balloon.descript['name'],
          balloon_path: null,
          surfaces: null
        });
      };
      notifyshellinfo = function() {
        return nanika.request('notifyshellinfo', {
          shell_name: nanika.named.shell.descript['name'],
          shell_path: null,
          surfaces: null
        });
      };
      notifyuserinfo = function() {};
      notifydressupinfo = function() {};
      ghostpathlist = function() {};
      balloonpathlist = function() {};
      installedghostname = function() {
        return nanika.request('installedghostname', {
          names: Object.keys(nanika.storage.ghosts).map(function(dirpath) {
            return nanika.storage.ghosts[dirpath].install.name;
          })
        });
      };
      installedballoonname = function() {
        return nanika.request('installedballoonname', {
          names: Object.keys(nanika.storage.balloons).map(function(dirpath) {
            return nanika.storage.balloons[dirpath].install.name;
          })
        });
      };
      installedshellname = function() {
        var dir, name, shell, shelldirs, shellnames, _i, _len, _ref;
        shell = nanika.storage.ghost(nanika.ghostpath).getDirectory('shell');
        shelldirs = shell.listChildren();
        shellnames = [];
        for (_i = 0, _len = shelldirs.length; _i < _len; _i++) {
          dir = shelldirs[_i];
          name = (_ref = shell.getDirectory(dir).descript) != null ? _ref.name : void 0;
          if (name != null) {
            shellnames.push(name);
          }
        }
        return nanika.request('installedshellname', {
          names: shellnames
        });
      };
      rateofusegraph = function() {};
      uniqueid = function() {};
      nanika.on('version.set', ownerghostname);
      nanika.on('version.set', otherghostname);
      nanika.on('version.set', basewareversion);
      nanika.on('version.set', notifyosinfo);
      nanika.on('version.set', notifyfontinfo);
      nanika.on('version.set', notifyselfinfo);
      nanika.on('version.set', notifyballooninfo);
      nanika.on('version.set', notifyshellinfo);
      nanika.on('version.set', notifyuserinfo);
      nanika.on('version.set', notifydressupinfo);
      nanika.on('version.set', ghostpathlist);
      nanika.on('version.set', balloonpathlist);
      nanika.on('version.set', installedghostname);
      nanika.on('version.set', installedballoonname);
      nanika.on('version.set', installedshellname);
      nanika.on('version.set', rateofusegraph);
      return nanika.on('version.set', uniqueid);
    }
  };

  this.NanikaPlugin = NanikaPlugin;

}).call(this);
